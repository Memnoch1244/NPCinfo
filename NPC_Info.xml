<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, December 22, 2023, 10:25 PM -->
<!-- MuClient version 5.07-pre -->

<muclient>
<plugin
   name="NPC_Info"
   author="Ramael"
   id="b4d0dab117586c793985623f"
   language="Lua"
   purpose="Shows NPCs in the same room as you."
   save_state="y"
   date_written="2023-12-22 22:24:13"
   requires="5.07"
   version="1.0"
   >

</plugin>


<!--  Script  -->

<script>
<![CDATA[

require "themed_miniwindows"
require "tprint"
dofile(GetInfo(60).."aardwolf_colors.lua")


my_window = ThemedTextWindow(
   GetPluginID(),  -- string, required, a unique identifier for this window
   0,  -- integer, required, where to put it if the player hasn't moved it
   0,  -- integer, required, where to put it if the player hasn't moved it
   400,  -- integer, required, how big to make it if the player hasn't moved it
   100,  -- integer, required, how big to make it if the player hasn't moved it
   "Refresh",  -- string, optional (nil means no titlebar), text to put into the title
   "center",  -- string, optional (default is "center"), "left", "center", or "right"
   false,  -- boolean, optional (default is false), true adds a close button in the top left
   true,  -- boolean, optional (default is false), make the window resizeable
   true,  -- boolean, optional (default is false), add a scrollbar and mousewheel scrolling
   true,  -- boolean, optional (default is false), make the text selectable
   true,  -- boolean, optional (default is false), make the text copyable via right-click
   false,  -- boolean, optional (default is false), turn detected URLs into clickable links
   false,  -- boolean, optional (default is false), automatically wrap text lines that are too wide
   nil,  -- string, optional (default is Dina), override the title font name
   nil,  -- integer, optional (default is 10), override the title font size
   nil,  -- string, optional (default is Dina), override the body text font name
   8,  -- integer, optional (default is 10), override the body text font size
   nil,  -- integer, optional (default is 1000), maximum number of text lines to keep
   nil,  -- integer, optional (default is 5 pixels), space between text and miniwindow frame
   nil,  -- boolean, optional (default is false), true will prevent the window from appearing until you call :show() on it
   false  -- boolean, optional (default is false), if true, pixels the same color as Theme.PRIMARY_BODY will be transparent
)


]]>

<!-- Look and Move Group look_room -->

function SetTitle(name, line, wildcards, styles)
  title_styles = {styles}
  table.remove(title_styles[1], 1)
  my_window:dress_window(title_styles)
--  tprint(title_styles)
  for _, v in ipairs (styles) do
      ColourTell (RGBColourToName(v.textcolour), 
                  v.backcolour, 
                  v.text)
      end -- for each style run
end

function chars_start()
  mob_count_here = 0
  line_styles = {}
  EnableTrigger("room_chars_trigger", true)
end

function room_chars(name, line, wildcards, styles)
  if not string.find(wildcards.char_name, "(Player)", 1, true) then
    mob_count_here = mob_count_here + 1
    table.insert(line_styles,styles)
--  Note("Room_Chars Added")
  end
end

function chars_end(name, line, wildcards, styles)
--  tprint(line_styles)
  my_window:clear()
  for i = 1, #line_styles do
	my_window:add_text(line_styles[i], draw_after)
  end
  EnableTrigger("room_chars_trigger", false)
  EnableTriggerGroup("refresh_mobs", false)
end


<!-- On Kill Group kill_look -->


function trigger_receive_xp()
  EnableTrigger("squelch_tags", true)
  EnableTriggerGroup("kill_look", true)
  EnableTriggerGroup("look_room", false)
  SendNoEcho("look")
end

function kill_start()
  mob_count_here = 0
  line_styles = {}
  EnableTrigger("kill_chars_trigger", true)
end

function kill_chars(name, line, wildcards, styles)
  if not string.find(wildcards.char_name, "(Player)", 1, true) then
    mob_count_here = mob_count_here + 1
    table.insert(line_styles,styles)
--  Note("Room_Chars Added")
  end
end

function kill_end(name, line, wildcards, styles)
  my_window:clear()
  for i = 1, #line_styles do
	my_window:add_text(line_styles[i], draw_after)
  end
  EnableTrigger("kill_chars_trigger", false)
  EnableTriggerGroup("look_room", true)
  EnableTriggerGroup("kill_look", false)
end

function squelch_info(name, line, wildcards, styles)
  EnableTrigger("squelch_look", true)
end

function stop_squelch(name, line, wildcards, styles)
  EnableTrigger("squelch_look", false)
end


<!-- Tag Logging in Development -->

function save_tag_state(name, line, wildcards)
  tag_list [#tag_list + 1] = Trim(wildcards.tag_status)
--  Note(wildcards.tag_status)
end

function tags_start(name, line, wildcards)
  EnableTrigger("tags_omit", true)
end

function tags_end(name, line, wildcards)
  EnableTriggerGroup("tags_save", false)
  EnableTrigger("tags_omit", false)
--  tprint(tag_list)
  Note("NPC Info loading complete.")
end

function OnPluginEnable()
  Note("Type \"npcshow\" or \"npchide\" to toggle the NPC Info miniwindow.")
  tag_list = {}
  SendNoEcho("tags roomchars on")
  SendNoEcho("tags roomnames on")
  SendNoEcho("tags roomdescs on")
  SendNoEcho("tags roomobjs on")
  EnableTriggerGroup("tags_save", true)
  SendNoEcho("tags")
end

function OnPluginInstall()
  Note("Type \"npcshow\" or \"npchide\" to toggle the NPC Info miniwindow.")
  tag_list = {}
  SendNoEcho("tags roomchars on")
  SendNoEcho("tags roomnames on")
  SendNoEcho("tags roomdescs on")
  SendNoEcho("tags roomobjs on")
  EnableTriggerGroup("tags_save", true)
  SendNoEcho("tags")
end

function window_show()
  my_window:show()
end

function window_hide()
  my_window:hide()
end

</script>




<triggers>


<!-- Look and Move Trigger Group look_room -->

<trigger
  name="capture_room_title"
  enabled="y"
  group="look_room"
  keep_evaluating="y"
  match="^\{rname\}(?P<room>.*)"
  regexp="y"
  omit_from_output="y"
  send_to="12"
  script="SetTitle"
  sequence="50"
  >
</trigger>

<trigger 
  match="{roomobjs}"
  group="look_room"
  enabled="y" 
  regexp="n" 
  sequence="100" 
  omit_from_output="y" 
  > 
</trigger>

<trigger 
  match="{/roomobjs}"
  group="look_room"
  enabled="y" 
  regexp="n" 
  sequence="100" 
  omit_from_output="y" 
  > 
</trigger>

<trigger 
  match="{roomchars}"
  script="chars_start"
  group="look_room"
  enabled="y" 
  regexp="n" 
  sequence="50" 
  omit_from_output="y" 
  send_to="12" 
  > 
</trigger>

<trigger match="*{/roomchars}*"
  script="chars_end"
  group="look_room"
  enabled="y" 
  regexp="n" 
  sequence="50" 
  omit_from_output="y" 
  send_to="12" 
  > 
</trigger>

<trigger 
  match="^(?P<char_name>.+)$"
  script="room_chars" 
  name="room_chars_trigger"
  enabled="n" 
  regexp="y" 
  sequence="50" 
  omit_from_output="n" 
  send_to="12" 
  > 
</trigger>


<!-- On Kill Trigger Group kill_look -->

<trigger
  name="kill_room_title"
  enabled="n"
  group="kill_look"
  keep_evaluating="y"
  match="{rname}*"
  regexp="n"
  omit_from_output="y"
  send_to="12"
  script="squelch_info"
  sequence="50"
  >
</trigger>

<trigger
  name="stop_squelch"
  enabled="n"
  group="kill_look"
  keep_evaluating="y"
  match="*{/roomobjs}*"
  regexp="n"
  omit_from_output="y"
  send_to="12"
  script="stop_squelch"
  sequence="50"
  >
</trigger>

<trigger 
  match="^(Tag option roomdescs turned ON|Tag option exits turned ON|Tag option roomobjs turned ON)$"
  name="squelch_tags"
  enabled="n" 
  regexp="y" 
  sequence="100" 
  omit_from_output="y" 
  > 
</trigger>

<trigger 
  match="*"
  name="squelch_look"
  enabled="n" 
  regexp="n" 
  sequence="100" 
  omit_from_output="y" 
  > 
</trigger>

<trigger 
  match="{roomchars}"
  script="kill_start"
  group="kill_look"
  enabled="n" 
  regexp="n" 
  sequence="50" 
  omit_from_output="y" 
  send_to="12" 
  > 
</trigger>

<trigger match="*{/roomchars}*"
  script="kill_end"
  group="kill_look"
  enabled="n" 
  regexp="n" 
  sequence="50" 
  omit_from_output="y" 
  send_to="12" 
  > 
</trigger>

<trigger 
  match="^(?P<char_name>.+)$"
  script="kill_chars" 
  name="kill_chars_trigger"
  enabled="n" 
  regexp="y" 
  sequence="50" 
  omit_from_output="y" 
  send_to="12" 
  > 
</trigger>

<trigger 
  match="^You (?:don't )?receive \d+(?:\+\d+)* experience points?\."
  script="trigger_receive_xp" 
  ignore_case="y" 
  enabled="y" 
  regexp="y" 
  sequence="1" 
  keep_evaluating="y" 
  omit_from_output="n" 
  > 
 </trigger>


<!-- Tag Logging in Development -->

<trigger 
  match="*"
  group="tags_save"
  enabled="n" 
  regexp="n" 
  sequence="100" 
  omit_from_output="y" 
  > 
</trigger>

<trigger match="NOTE: GMCP session tags option is *"
  script="tags_end"
  enabled="n" 
  group="tags_save"
  regexp="n" 
  sequence="50" 
  omit_from_output="y" 
  send_to="12" 
  > 
</trigger>

<trigger 
  match="^EXITS         Display tags around autoexits: {exits}                  (?P<tag_status>.*)$"
  script="save_tag_state" 
  group="tags_save"
  enabled="n" 
  regexp="y" 
  sequence="75" 
  omit_from_output="y" 
  send_to="12" 
  >
</trigger>

<trigger 
  match="^ROOMDESCS     Display tags around descs {rdesc}                       (?P<tag_status>.*)$"
  script="save_tag_state" 
  enabled="n" 
  regexp="y"
  group="tags_save" 
  sequence="75" 
  omit_from_output="y" 
  send_to="12" 
  >
</trigger>

<trigger 
  match="^ROOMCHARS     Display tags around characters in a room.               (?P<tag_status>.*)$"
  script="save_tag_state" 
  group="tags_save"
  enabled="n" 
  regexp="y" 
  sequence="75" 
  omit_from_output="y" 
  send_to="12" 
  >
</trigger>

</triggers>

<aliases>

<alias
  match="npcshow"
  regexp="n"
  enabled="y"
  sequence="100"
  ignore_case="y"
  send_to="12"
  script="window_show"
  >
</alias>

<alias
  match="npchide"
  regexp="n"
  enabled="y"
  sequence="100"
  ignore_case="y"
  send_to="12"
  script="window_hide"
  >
</alias>


</aliases>

</muclient>
