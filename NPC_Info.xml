<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, December 22, 2023, 10:25 PM -->
<!-- MuClient version 5.07-pre -->

<muclient>
<plugin
   name="NPC_Info"
   author="Ramael"
   id="b4d0dab117586c793985623f"
   language="Lua"
   purpose="Shows NPCs in the same room as you."
   save_state="y"
   date_written="2023-12-22 22:24:13"
   requires="5.07"
   version="1.0"
   >

</plugin>


<!--  Script  -->

<script>
<![CDATA[
require "gmcphelper"
require "themed_miniwindows"
require "tprint"
dofile(GetInfo(60).."aardwolf_colors.lua")

local gmcp_state = 1
local char_state = {3, 4, 8, 11, 12}

my_window = ThemedTextWindow(
   GetPluginID(),  -- string, required, a unique identifier for this window
   0,  -- integer, required, where to put it if the player hasn't moved it
   0,  -- integer, required, where to put it if the player hasn't moved it
   400,  -- integer, required, how big to make it if the player hasn't moved it
   100,  -- integer, required, how big to make it if the player hasn't moved it
   "Refresh",  -- string, optional (nil means no titlebar), text to put into the title
   "center",  -- string, optional (default is "center"), "left", "center", or "right"
   false,  -- boolean, optional (default is false), true adds a close button in the top left
   true,  -- boolean, optional (default is false), make the window resizeable
   true,  -- boolean, optional (default is false), add a scrollbar and mousewheel scrolling
   true,  -- boolean, optional (default is false), make the text selectable
   true,  -- boolean, optional (default is false), make the text copyable via right-click
   false,  -- boolean, optional (default is false), turn detected URLs into clickable links
   false,  -- boolean, optional (default is false), automatically wrap text lines that are too wide
   nil,  -- string, optional (default is Dina), override the title font name
   nil,  -- integer, optional (default is 10), override the title font size
   nil,  -- string, optional (default is Dina), override the body text font name
   8,  -- integer, optional (default is 10), override the body text font size
   nil,  -- integer, optional (default is 1000), maximum number of text lines to keep
   nil,  -- integer, optional (default is 5 pixels), space between text and miniwindow frame
   nil,  -- boolean, optional (default is false), true will prevent the window from appearing until you call :show() on it
   false  -- boolean, optional (default is false), if true, pixels the same color as Theme.PRIMARY_BODY will be transparent
)


]]>

<!-- Look and Player Move Functions -->

function SetTitle(name, line, wildcards, styles)
  EnableTriggerGroup("move_group", false)
  title_styles = {styles}
 
--  tprint(title_styles)

  if #title_styles[1] > 1 then
    table.remove(title_styles[1], 1)
    my_window:dress_window(title_styles)
    for _, v in ipairs (styles) do
      ColourTell (RGBColourToName(v.textcolour), 
                  v.backcolour, 
                  v.text)
    end -- for each style run
  else
    my_window:dress_window(string.sub(title_styles[1][1].text,8))
    for _, v in ipairs (title_styles[1]) do
      ColourTell (RGBColourToName(v.textcolour), 
                  v.backcolour, 
                  string.sub(v.text,8))
    end -- for each style run

  end  -- if

end

function chars_start()
  mob_count_here = 0
  line_styles = {}
  EnableTrigger("room_chars_trigger", true)
--  Note("chars_start")
end

function room_chars(name, line, wildcards, styles)
  if not string.find(wildcards.char_name, "(Player)", 1, true) then
    if not string.find(wildcards.char_name, "(P)", 1, true) then
      mob_count_here = mob_count_here + 1
      table.insert(line_styles,styles)
	end
  end
  ColourNote("red","blue","Logging Room NPCs")
end

function chars_end(name, line, wildcards, styles)
  my_window:clear()
  for i = 1, #line_styles do
	my_window:add_text(line_styles[i], draw_after)
  end
  EnableTrigger("room_chars_trigger", false)
  EnableTriggerGroup("refresh_mobs", false)
  EnableTriggerGroup("move_group", true)
  ColourNote("red","blue", "Ended Logging Room NPCs")
end


<!-- On Kill or NPC Move Functions -->

function trigger_npc_move()
  EnableTrigger("squelch_tags", true)
  EnableTriggerGroup("kill_look", true)
  EnableTriggerGroup("look_room", false)
  EnableTriggerGroup("move_group", false)
  for i = 1, #char_state do
    if tonumber(gmcp_state) == tonumber(char_state[i]) then
	  SendNoEcho("look")
	end
  end
end

function trigger_receive_xp()
  EnableTrigger("squelch_tags", true)
  EnableTriggerGroup("kill_look", true)
  EnableTriggerGroup("look_room", false)
  EnableTriggerGroup("move_group", false)
  for i = 1, #char_state do
    if tonumber(gmcp_state) == tonumber(char_state[i]) then
	  SendNoEcho("look")
	end
  end
--  Note("trigger_receive_xp")
end

function kill_start()
  mob_count_here = 0
  line_styles = {}
  EnableTrigger("kill_chars_trigger", true)
--  Note("kill_start")
end

function kill_chars(name, line, wildcards, styles)
  if not string.find(wildcards.char_name, "(Player)", 1, true) then
    if not string.find(wildcards.char_name, "(P)", 1, true) then
      mob_count_here = mob_count_here + 1
      table.insert(line_styles,styles)
	end
  end
--  Note("kill_chars")
end

function kill_end(name, line, wildcards, styles)
  my_window:clear()
  for i = 1, #line_styles do
	my_window:add_text(line_styles[i], draw_after)
  end
  EnableTrigger("kill_chars_trigger", false)
  EnableTriggerGroup("look_room", true)
  EnableTriggerGroup("kill_look", false)
  EnableTriggerGroup("move_group", true)
--  Note("kill_end")
end

function squelch_info(name, line, wildcards, styles)
  EnableTrigger("squelch_look", true)
--  Note("squelch_info")
end

function stop_squelch(name, line, wildcards, styles)
  EnableTrigger("squelch_look", false)
--  Note("stop_squelch")
end

<!-- Other Functions -->

function OnPluginBroadcast(msg, id, name, text)

  -- check for broadcast from GMCP helper
  if (id == '3e7dedbe37e44942dd46d264') then
    -- check for level change for comparison to GQ level range
    if (text=="char.status") then
      gmcp_state = gmcp("char.status.state")
    end  -- char status
  end  -- plugin id check

end  -- function

function OnPluginEnable()
  OnPluginInstall()
end

function OnPluginInstall()
  Note("Plugin NPC Info loaded.  Type \"npcshow\" or \"npchide\" to toggle the NPC Info miniwindow.")
  SendNoEcho("protocols gmcp sendchar")

  SendNoEcho("tags roomchars on")
  SendNoEcho("tags roomnames on")
  SendNoEcho("tags roomdescs on")
  SendNoEcho("tags roomobjs on")
end

function window_show()
  my_window:show()
end

function window_hide()
  my_window:hide()
end

</script>


<!-- Triggers -->

<triggers>

<!-- Look and Player Move Triggers -->

<trigger match="^\{rname\}(?P<room>.*)"
    script="SetTitle"  name="capture_room_title"  group="look_room"  enabled="y"  keep_evaluating="y"  regexp="y"  omit_from_output="y"  send_to="12"  sequence="50"  >
</trigger>

<trigger match="{roomobjs}"
    group="look_room"  enabled="y"   regexp="n"   omit_from_output="y"   sequence="100"   > 
</trigger>

<trigger match="{/roomobjs}"
    group="look_room"  enabled="y"   regexp="n"   omit_from_output="y"   sequence="100"   > 
</trigger>

<trigger match="{roomchars}"
    script="chars_start"  group="look_room"  enabled="y"   regexp="n"   omit_from_output="y"   send_to="12"   sequence="50"   > 
</trigger>

<trigger match="*{/roomchars}*"
    script="chars_end"  group="look_room"  enabled="y"   regexp="n"   omit_from_output="y"   send_to="12"   sequence="1"   > 
</trigger>

<trigger match="^(?P<char_name>.+)$"
    script="room_chars"   name="room_chars_trigger"  enabled="n"   regexp="y"   omit_from_output="n"   send_to="12"   sequence="1"   > 
</trigger>


<!-- On Kill or NPC Move Triggers -->

<trigger match="^You (?:don't )?receive \d+(?:\+\d+)* experience points?\."
    script="trigger_receive_xp"   ignore_case="y"   enabled="y"   regexp="y"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="That was a pointless no-experience kill!"
    script="trigger_receive_xp"   ignore_case="y"   enabled="y"   regexp="n"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="{rname}*"
    script="squelch_info"  name="kill_room_title"  group="kill_look"  enabled="n"  keep_evaluating="y"  regexp="n"  omit_from_output="y"  send_to="12"  sequence="50"  >
</trigger>

<trigger match="*"
    name="squelch_look"  enabled="n"   regexp="n"   omit_from_output="y"   sequence="100"   > 
</trigger>

<trigger match="*{/roomobjs}*"
    script="stop_squelch"  name="stop_squelch"  enabled="n"  group="kill_look"  keep_evaluating="y"  regexp="n"  omit_from_output="y"  send_to="12"  sequence="50"  >
</trigger>

<trigger match="{roomchars}"
    script="kill_start"  group="kill_look"  enabled="n"   regexp="n"   omit_from_output="y"   send_to="12"   sequence="50"   > 
</trigger>

<trigger match="^(?P<char_name>.+)$"
    script="kill_chars"   name="kill_chars_trigger"  enabled="n"   regexp="y"   omit_from_output="y"   send_to="12"   sequence="50"   > 
</trigger>

<trigger match="*{/roomchars}*"
    script="kill_end"  group="kill_look"  enabled="n"   regexp="n"   omit_from_output="y"   send_to="12"   sequence="50"   > 
</trigger>


<!-- Generic Movement Triggers -->
 
<trigger match="^(.*?) (leaves|moves|wanders|marches|flits|sloshes|slinks|crashes) (.*?)\.$"
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="y"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="^(.*?) (pads|canters|flies|hops|strolls|trudges|charges|advances|dawdles) (.*?)\.$"
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="y"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="^(.*?) (waddles|rambles|moseys|ambles|bounds|flutters|arrives|appears) (.*?)\.$"
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="y"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="Your journey was broken by the need to defend yourself."
    script="trigger_npc_move"   ignore_case="y"   enabled="y"   regexp="n"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>


<!-- Kobold Siege Camp Custom Movement Triggers -->

<trigger match="* comes charging *."
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="n"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="* has joined in the siege."
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="n"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="* continues advancing *."
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="n"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="* is ready for some action."
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="n"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="* has joined in the siege."
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="n"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="* already charging the castle."
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="n"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>

<trigger match="* joins the fray."
    script="trigger_npc_move"   group="move_group"  ignore_case="y"   enabled="y"   regexp="n"   keep_evaluating="y"   omit_from_output="n"   sequence="1"   > 
</trigger>


<!-- Other Triggers -->

<trigger match="^(Tag option roomdescs turned ON|Tag option exits turned ON|Tag option roomobjs turned ON|Tag option roomnames turned ON)$"
    name="squelch_tags"  enabled="y"   regexp="y"   omit_from_output="y"   sequence="100"   > 
</trigger>

</triggers>


<!-- Aliases -->

<aliases>

<alias match="^npcshow$"
    script="window_show"  regexp="y"  enabled="y"  ignore_case="y"  send_to="12"  sequence="100"  >
</alias>

<alias match="^npchide$"
    script="window_hide"  regexp="y"  enabled="y"  ignore_case="y"  send_to="12"  sequence="100"  >
</alias>

</aliases>



</muclient>
